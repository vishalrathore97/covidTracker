{"version":3,"sources":["util.js","InfoBox.jsx","Map.jsx","Table.jsx","LineGraph.jsx","App.js","reportWebVitals.js","index.js"],"names":["casesTypeColors","cases","hex","rgb","half_op","multiplier","recovered","deaths","prettyPrintStats","stat","numeral","format","sortData","data","sort","a","b","showDataOnMap","caseType","map","country","Circle","center","countryInfo","lat","long","pathOptions","fillColor","color","radius","Math","sqrt","Popup","className","style","backgroundImage","flag","InfoBox","onCardClick","title","total","active","isRed","isGreen","props","Card","onClick","CardContent","Typography","Map","zoom","ChangeView","useMap","setView","MapContainer","scrollWheelZoom","TileLayer","attribution","url","Table","countries","options","plugins","legend","display","elements","point","maintainAspectRatio","tooltip","mode","intersect","callbacks","label","tooltipItem","parsed","y","scales","xAxes","grid","ticks","callback","val","index","this","getLabelForValue","LineGraph","useState","setData","useEffect","fetch","then","res","json","filteredData","timeline","lineData","buildLineData","fetchData","lastDataPoint","lineDataArr","Object","keys","forEach","date","newDataPoint","x","push","length","datasets","fill","borderColor","backgroundColor","pointRadius","App","setCountries","mapCountries","setMapCountries","setCountry","setCountryInfo","tableData","setTableData","setCaseType","mapCenter","setMapCenter","mapZoom","setMapZoom","d","name","value","iso2","sortedData","countriesData","handleCountryChange","event","countryCode","target","FormControl","Select","variant","onChange","MenuItem","c","e","todayCases","todayRecovered","todayDeaths","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e9213639.chunk.js","sourcesContent":["import { Circle, Popup } from \"react-leaflet\";\r\nimport React from \"react\";\r\nimport numeral from \"numeral\";\r\n\r\nexport const casesTypeColors = {\r\n  cases: {\r\n    hex: \"#CC1034\",\r\n    rgb: \"rgb(204, 16, 52)\",\r\n    half_op: \"rgba(204, 16, 52, 0.5)\",\r\n    multiplier: 800,\r\n  },\r\n  recovered: {\r\n    hex: \"#7dd71d\",\r\n    rgb: \"rgb(125, 215, 29)\",\r\n    half_op: \"rgba(125, 215, 29, 0.5)\",\r\n    multiplier: 1200,\r\n  },\r\n  deaths: {\r\n    hex: \"#fb4443\",\r\n    rgb: \"rgb(251, 68, 67)\",\r\n    half_op: \"rgba(251, 68, 67, 0.5)\",\r\n    multiplier: 2000,\r\n  },\r\n};\r\n\r\nexport const prettyPrintStats = (stat) => {\r\n  return stat ? numeral(stat).format(\"0.0a\") : \"0\";\r\n};\r\n\r\nexport const sortData = (data) => {\r\n  const sortedData = [...data];\r\n  return sortedData.sort((a, b) => (a.cases > b.cases ? -1 : 1));\r\n};\r\n\r\nexport const showDataOnMap = (caseType, data) => {\r\n  return data.map((country) => (\r\n    <Circle\r\n      center={[country.countryInfo.lat, country.countryInfo.long]}\r\n      pathOptions={{\r\n        fillColor: casesTypeColors[caseType].hex,\r\n        color: casesTypeColors[caseType].hex,\r\n      }}\r\n      radius={\r\n        Math.sqrt(country[caseType] / 10) * casesTypeColors[caseType].multiplier\r\n      }\r\n    >\r\n      <Popup>\r\n        <div className=\"info-container\">\r\n          <div\r\n            className=\"info-flag\"\r\n            style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\r\n          ></div>\r\n          <div className=\"info-name\">{country.country}</div>\r\n          <div className=\"info-confirmed\">\r\n            Cases: {numeral(country.cases).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-recovered\">\r\n            Recovered: {numeral(country.recovered).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-deaths\">\r\n            Deaths: {numeral(country.deaths).format(\"0,0\")}\r\n          </div>\r\n        </div>\r\n      </Popup>\r\n    </Circle>\r\n  ));\r\n};\r\n","import { Card, CardContent, Typography } from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport { prettyPrintStats } from \"./util\";\r\nimport \"./InfoBox.css\";\r\n\r\nfunction InfoBox({\r\n  onCardClick,\r\n  title,\r\n  cases,\r\n  total,\r\n  active,\r\n  isRed,\r\n  isGreen,\r\n  ...props\r\n}) {\r\n  return (\r\n    <Card\r\n      onClick={props.onClick}\r\n      className={`infoBox ${isRed && \"infoBox--red\"} ${\r\n        active && \"infoBox--selected\"\r\n      }`}\r\n    >\r\n      <CardContent>\r\n        <Typography className=\"infoBox__title\" color=\"textSecondary\">\r\n          {title}\r\n        </Typography>\r\n        <h2 className={`infoBox__cases ${isGreen && \"infoBox--green\"}`}>\r\n          +{prettyPrintStats(cases)}\r\n        </h2>\r\n        <Typography className=\"infoBox__total\" color=\"textSecondary\">\r\n          {prettyPrintStats(total)} Total\r\n        </Typography>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default InfoBox;\r\n","import React from \"react\";\r\nimport { MapContainer, TileLayer, useMap } from \"react-leaflet\";\r\nimport { showDataOnMap } from \"./util.js\";\r\nimport \"./Map.css\";\r\n\r\nfunction Map({ data, center, zoom, caseType }) {\r\n  function ChangeView({ center, zoom }) {\r\n    const map = useMap();\r\n    map.setView(center, zoom);\r\n    return null;\r\n  }\r\n  return (\r\n    <MapContainer\r\n      className=\"map\"\r\n      center={center}\r\n      zoom={zoom}\r\n      scrollWheelZoom={true}\r\n    >\r\n      <ChangeView center={center} zoom={zoom} />\r\n      <TileLayer\r\n        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n      />\r\n      {showDataOnMap(caseType, data)}\r\n    </MapContainer>\r\n  );\r\n}\r\n\r\nexport default Map;\r\n","import React from \"react\";\r\nimport numeral from \"numeral\";\r\nimport \"./Table.css\";\r\n\r\nfunction Table({ countries }) {\r\n  return (\r\n    <div className=\"table\">\r\n      {countries.map(({ country, cases }) => (\r\n        <tr key={country}>\r\n          <td>{country}</td>\r\n          <td>{numeral(cases).format(\",0\")}</td>\r\n        </tr>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Table;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport numeral from \"numeral\";\r\nimport { casesTypeColors } from \"./util\";\r\n\r\nconst options = {\r\n  plugins: {\r\n    legend: {\r\n      display: false,\r\n    },\r\n    elements: {\r\n      point: {\r\n        radius: 0,\r\n      },\r\n    },\r\n    maintainAspectRatio: false,\r\n    tooltip: {\r\n      mode: \"index\",\r\n      intersect: false,\r\n      callbacks: {\r\n        label: function (tooltipItem) {\r\n          return numeral(tooltipItem.parsed.y).format(\"+0,0\");\r\n        },\r\n      },\r\n    },\r\n  },\r\n  scales: {\r\n    xAxes: {\r\n      grid: {\r\n        display: false,\r\n      },\r\n    },\r\n    y: {\r\n      grid: {\r\n        display: false,\r\n      },\r\n      ticks: {\r\n        callback: function (val, index) {\r\n          // Hide the label of every 2nd dataset\r\n          return numeral(this.getLabelForValue(val)).format(\"0a\");\r\n        },\r\n      },\r\n    },\r\n  },\r\n};\r\n\r\nfunction LineGraph({ caseType, country, ...props }) {\r\n  const [data, setData] = useState({});\r\n\r\n  useEffect(() => {\r\n    const url =\r\n      country === \"Worldwide\"\r\n        ? \"https://disease.sh/v3/covid-19/historical/all?lastdays=120\"\r\n        : `https://disease.sh/v3/covid-19/historical/${country}?lastdays=120`;\r\n    const fetchData = async () => {\r\n      await fetch(url)\r\n        .then((res) => res.json())\r\n        .then((data) => {\r\n          let filteredData = country === \"Worldwide\" ? data : data.timeline;\r\n          const lineData = buildLineData(filteredData, caseType);\r\n          setData(lineData);\r\n        });\r\n    };\r\n    fetchData();\r\n  }, [caseType, country]);\r\n\r\n  const buildLineData = (data, caseType) => {\r\n    const lineDataArr = [];\r\n    let lastDataPoint;\r\n    Object.keys(data.cases).forEach((date) => {\r\n      if (lastDataPoint) {\r\n        const newDataPoint = {\r\n          x: date,\r\n          y: data[caseType][date] - lastDataPoint,\r\n        };\r\n        lineDataArr.push(newDataPoint);\r\n      }\r\n      lastDataPoint = data[caseType][date];\r\n    });\r\n    return lineDataArr;\r\n  };\r\n\r\n  return (\r\n    <div className={props.className}>\r\n      {data?.length > 0 && (\r\n        <Line\r\n          data={{\r\n            datasets: [\r\n              {\r\n                data: data,\r\n                fill: true,\r\n                borderColor: casesTypeColors[caseType].hex,\r\n                backgroundColor: casesTypeColors[caseType].half_op,\r\n                pointRadius: 0,\r\n              },\r\n            ],\r\n          }}\r\n          options={options}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LineGraph;\r\n","import {\n  FormControl,\n  Select,\n  MenuItem,\n  Card,\n  CardContent,\n} from \"@material-ui/core\";\nimport React, { useState, useEffect } from \"react\";\nimport InfoBox from \"./InfoBox\";\nimport Map from \"./Map\";\nimport Table from \"./Table\";\nimport LineGraph from \"./LineGraph\";\nimport { sortData } from \"./util\";\nimport \"./App.css\";\nimport \"leaflet/dist/leaflet.css\";\n\nfunction App() {\n  const [countries, setCountries] = useState([]);\n  const [mapCountries, setMapCountries] = useState([]);\n  const [country, setCountry] = useState(\"Worldwide\");\n  const [countryInfo, setCountryInfo] = useState({});\n  const [tableData, setTableData] = useState([]);\n  const [caseType, setCaseType] = useState(\"cases\");\n  const [mapCenter, setMapCenter] = useState([34.80746, -40.4796]);\n  const [mapZoom, setMapZoom] = useState(3);\n\n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n      .then((res) => res.json())\n      .then((data) => {\n        setCountryInfo(data);\n      });\n  }, []);\n\n  useEffect(() => {\n    const countriesData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/countries?allowNull=true\")\n        .then((res) => res.json())\n        .then((data) => {\n          const countries = data.map((d) => {\n            return { name: d.country, value: d.countryInfo.iso2 };\n          });\n          const sortedData = sortData(data);\n          setTableData(sortedData);\n          setCountries(countries);\n          setMapCountries(data);\n        });\n    };\n    countriesData();\n  }, []);\n\n  const handleCountryChange = async (event) => {\n    const countryCode = event.target.value;\n    const url =\n      countryCode === \"Worldwide\"\n        ? \"https://disease.sh/v3/covid-19/all\"\n        : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n    await fetch(url)\n      .then((res) => res.json())\n      .then((data) => {\n        setCountryInfo(data);\n        setCountry(countryCode);\n        if (countryCode === \"Worldwide\") {\n          setMapCenter([34.80746, -40.4796]);\n          setMapZoom(3);\n        } else {\n          setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n          setMapZoom(4);\n        }\n      });\n  };\n\n  return (\n    <div className=\"app\">\n      <div className=\"app__left\">\n        <div className=\"app__header\">\n          <h1>COVID TRACKER</h1>\n          <FormControl className=\"app__dropdown\">\n            <Select\n              variant=\"outlined\"\n              onChange={handleCountryChange}\n              value={country}\n            >\n              <MenuItem value=\"Worldwide\">Worldwide</MenuItem>\n              {countries.map((c) => (\n                <MenuItem value={c.value}>{c.name}</MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </div>\n        <div className=\"app__stats\">\n          <InfoBox\n            isRed\n            active={caseType === \"cases\"}\n            onClick={(e) => setCaseType(\"cases\")}\n            title=\"Coronavirus Cases\"\n            cases={countryInfo.todayCases}\n            total={countryInfo.cases}\n          />\n          <InfoBox\n            isGreen\n            active={caseType === \"recovered\"}\n            onClick={(e) => setCaseType(\"recovered\")}\n            title=\"Recovered\"\n            cases={countryInfo.todayRecovered}\n            total={countryInfo.recovered}\n          />\n          <InfoBox\n            isRed\n            active={caseType === \"deaths\"}\n            onClick={(e) => setCaseType(\"deaths\")}\n            title=\"Deaths\"\n            cases={countryInfo.todayDeaths}\n            total={countryInfo.deaths}\n          />\n        </div>\n        <Map\n          zoom={mapZoom}\n          data={mapCountries}\n          caseType={caseType}\n          center={mapCenter}\n        />\n      </div>\n      <Card className=\"app__right\">\n        <CardContent className=\"app_content\">\n          <h3>Live Cases By Country</h3>\n          <Table countries={tableData} />\n          <h3>\n            {countryInfo.country || \"Worldwide\"} new {caseType}\n          </h3>\n          <LineGraph\n            className=\"app__graph\"\n            country={country}\n            caseType={caseType}\n          />\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}